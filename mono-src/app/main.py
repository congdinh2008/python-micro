"""
Main FastAPI Application - Product Catalog Service
Entry point cho RESTful API v·ªõi FastAPI, SQLAlchemy, JWT
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from app.config import settings
from app.api import auth, products

# T·∫°o FastAPI application
app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="""
    ## Product Catalog Service - Qu·∫£n l√Ω S·∫£n ph·∫©m v√† X√°c th·ª±c JWT

    API RESTful ƒë·ªÉ qu·∫£n l√Ω s·∫£n ph·∫©m v·ªõi authentication s·ª≠ d·ª•ng JWT.
    X√¢y d·ª±ng v·ªõi FastAPI, SQLAlchemy 2.0, PostgreSQL, v√† Repository Pattern.

    ### T√≠nh nƒÉng ch√≠nh:
    - ‚úÖ **Authentication**: ƒêƒÉng k√Ω v√† ƒëƒÉng nh·∫≠p v·ªõi JWT
    - ‚úÖ **Product Management**: CRUD operations cho s·∫£n ph·∫©m
    - ‚úÖ **Security**: JWT-based authentication cho c√°c endpoints b·∫£o m·∫≠t
    - ‚úÖ **Documentation**: Swagger/OpenAPI t·ª± ƒë·ªông

    ### Endpoints:
    - **POST /register** - ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
    - **POST /login** - ƒêƒÉng nh·∫≠p v√† nh·∫≠n JWT token
    - **GET /products** - L·∫•y danh s√°ch s·∫£n ph·∫©m (public)
    - **GET /products/{id}** - L·∫•y chi ti·∫øt s·∫£n ph·∫©m (public)
    - **POST /products** - T·∫°o s·∫£n ph·∫©m m·ªõi (y√™u c·∫ßu JWT)
    - **PUT /products/{id}** - C·∫≠p nh·∫≠t s·∫£n ph·∫©m (y√™u c·∫ßu JWT)
    - **DELETE /products/{id}** - X√≥a s·∫£n ph·∫©m (y√™u c·∫ßu JWT)

    ### Authentication:
    Sau khi ƒëƒÉng nh·∫≠p, s·ª≠ d·ª•ng JWT token trong header:
    ```
    Authorization: Bearer <your_token>
    ```

    ### Repository & Architecture:
    - **Models**: SQLAlchemy models (User, Product)
    - **Repositories**: Data access layer v·ªõi Repository Pattern
    - **Services**: Business logic layer
    - **API**: FastAPI routes v√† endpoints
    - **Schemas**: Pydantic models cho validation
    """,
    docs_url="/docs",
    redoc_url="/redoc",
)

# CORS Middleware
# Cho ph√©p frontend t·ª´ c√°c origins ƒë∆∞·ª£c c·∫•u h√¨nh truy c·∫≠p API
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(auth.router)
app.include_router(products.router)


@app.get(
    "/",
    tags=["Root"],
    summary="Root endpoint",
    description="Ki·ªÉm tra API ƒëang ho·∫°t ƒë·ªông"
)
def root():
    """
    Root endpoint ƒë·ªÉ ki·ªÉm tra API

    **Response:**
    - Message v√† version th√¥ng tin
    """
    return {
        "message": "Welcome to Product Catalog Service API",
        "version": settings.APP_VERSION,
        "docs": "/docs",
        "redoc": "/redoc",
    }


@app.get(
    "/health",
    tags=["Health"],
    summary="Health check",
    description="Ki·ªÉm tra tr·∫°ng th√°i health c·ªßa service"
)
def health_check():
    """
    Health check endpoint

    **Response:**
    - Status c·ªßa service
    """
    return {
        "status": "healthy",
        "service": settings.APP_NAME,
        "version": settings.APP_VERSION,
    }


# Event handlers
@app.on_event("startup")
async def startup_event():
    """Event handler khi application kh·ªüi ƒë·ªông"""
    print(f"üöÄ {settings.APP_NAME} v{settings.APP_VERSION} is starting...")
    print(f"üìö API Documentation: http://localhost:8000/docs")
    print(f"üìñ ReDoc Documentation: http://localhost:8000/redoc")


@app.on_event("shutdown")
async def shutdown_event():
    """Event handler khi application shutdown"""
    print(f"üõë {settings.APP_NAME} is shutting down...")
